{"version":3,"sources":["components/MyCanvas.jsx","App.js","serviceWorker.js","index.js","components/functions.js","components/MyDropzone.jsx"],"names":["MyCanvas","props","_this","Object","_Users_admin_reactjs_rekognition_demo_master_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","_Users_admin_reactjs_rekognition_demo_master_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_Users_admin_reactjs_rekognition_demo_master_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","myCanvasRef","React","createRef","thumbWidth","thumbHeight","canvasOnClick","onClick","imageDetails","faces","compareSource","compareSrc","updateCanvas","canvas","current","ctx","getContext","_getThumbSize","getThumbSize","width","height","drawImage","origSrc","x","y","_this$imageDetails","description","rank","similarity","undefined","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","className","ref","align","data-toggle","title","Component","App","react_default","MyDropzone","style","fontSize","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","verifyFile","files","imageMaxSize","acceptedFileTypesArray","length","currentFile","currentFileType","type","size","console","log","includes","maxWH","getSimilarityDescription","preloadImage","url","Promise","resolve","reject","img","Image","src","addEventListener","__webpack_require__","d","__webpack_exports__","AWS","config","region","process","credentials","CognitoIdentityCredentials","IdentityPoolId","acceptedFileTypes","DivStep","_ref","note","react__WEBPACK_IMPORTED_MODULE_7___default","UploadDangerAlert","_ref2","role","UploadInfoAlert","_ref3","UploadSuccessAlert","CompareResult","_ref4","result","cellPadding","cellSpacing","border","map","arr","i","_MyCanvas_jsx__WEBPACK_IMPORTED_MODULE_12__","key","_Users_admin_reactjs_rekognition_demo_master_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__","_Users_admin_reactjs_rekognition_demo_master_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__","_Users_admin_reactjs_rekognition_demo_master_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__","handleOnDropForstep1Image","acceptedFiles","rejectedFiles","alert","onDrop","handleOnDropForParentImage","_ref5","_Users_admin_reactjs_rekognition_demo_master_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__","_Users_admin_reactjs_rekognition_demo_master_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","mark","_callee2","stateFlag","reader","wrap","_context2","prev","next","FileReader","setState","imgStep1LoadStatus","imgStep2LoadStatus","_callee","readerResult","imgArr","_context","sent","split","imgStep1","detectFaces","imgStep2","state","compareFaces","stop","readAsDataURL","_x","_x2","apply","arguments","_ref7","_callee3","imageFlag","base64Image","rekognition","detectFaceRequest","detectFaceResult","_context3","Rekognition","Bytes","Buffer","from","Attributes","promise","FaceDetails","updateStep1Canvas","_x3","_x4","_ref8","_callee4","source","target","compareFaceParams","compareFaceRequest","compareFaceResult","faceArr","ctr","imageDetailsArr","boundingBox","_this$calculateBoundi","_context4","SimilarityThreshold","SourceImage","TargetImage","FaceMatches","BoundingBox","Math","round","calculateBoundingLines","compareResult","_x5","_x6","clearToDefault","event","preventDefault","initialState","onThumbClick","imgStep1CanvasRef","dataURL","toDataURL","imgStep2CanvasRef","imgStep1FaceDetails","imgWidth","naturalWidth","imgHeight","naturalHeight","Left","Top","Width","Height","faceObject","imgPreloaded","origWidth","origHeight","_getThumbSize2","ageRange","AgeRange","_this$calculateBoundi2","age","_this2","_this$state","padding","react_dropzone__WEBPACK_IMPORTED_MODULE_9__","accept","maxSize","multiple","_ref9","getRootProps","getInputProps","isDragActive","assign","classNames","dropzone--isActive","_ref10"],"mappings":"+KAMMA,cAEF,SAAAA,EAAaC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAChBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,YAAcC,IAAMC,YACzBT,EAAKU,WAAa,GAClBV,EAAKW,YAAc,GAEnBX,EAAKY,cAAgBZ,EAAKD,MAAMc,QAEhCb,EAAKc,aAAed,EAAKD,MAAMgB,MAC/Bf,EAAKgB,cAAgBhB,EAAKD,MAAMkB,WAThBjB,mFAahBG,KAAKe,sDAIL,IAAMJ,EAAeX,KAAKW,aAEpBK,EAAShB,KAAKI,YAAYa,QAC1BC,EAAMF,EAAOG,WAAW,MAJnBC,EAMeC,YAAarB,KAAKO,WAAYI,EAAaW,MAAOX,EAAaY,QAAjFD,EANGF,EAMHE,MAAOC,EANJH,EAMIG,OAEfP,EAAOM,MAAQA,EACfN,EAAOO,OAASA,EAChBL,EAAIM,UACAxB,KAAKJ,MAAM6B,QACXd,EAAae,EACbf,EAAagB,EACbhB,EAAaW,MACbX,EAAaY,OACb,EACA,EACAD,EACAC,oCAIC,IAAAK,EACqC5B,KAAKW,aAAvCkB,EADHD,EACGC,YAAaC,EADhBF,EACgBE,KAAMC,EADtBH,EACsBG,WAC3B,YAC4BC,IAAvBhC,KAAKa,cACNoB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,wCAAwCC,IAAKrC,KAAKI,YAAaM,QAASV,KAAKS,iBAEnGwB,EAAAC,EAAAC,cAAA,UACQF,EAAAC,EAAAC,cAAA,MAAIG,MAAM,QAAOL,EAAAC,EAAAC,cAAA,cAAOL,IACxBG,EAAAC,EAAAC,cAAA,MAAIG,MAAM,QACNL,EAAAC,EAAAC,cAAA,UAAQC,UAAU,wCAAwCC,IAAKrC,KAAKI,YAAaM,QAASV,KAAKS,iBAEnGwB,EAAAC,EAAAC,cAAA,MAAIG,MAAM,QACNL,EAAAC,EAAAC,cAAA,QAAMI,cAAY,UAAUC,MAAO,qBAAuBT,EAAa,KACjEF,YAvDPxB,IAAMoC,WA+Dd9C,kKCpCA+C,2LA1BX,OACEC,EAAAT,EAAAC,cAAA,OAAKC,UAAU,OAEbO,EAAAT,EAAAC,cAAA,WAEAQ,EAAAT,EAAAC,cAAA,UAAIQ,EAAAT,EAAAC,cAAA,qDACJQ,EAAAT,EAAAC,cAAA,oEACAQ,EAAAT,EAAAC,cAAA,kEAEAQ,EAAAT,EAAAC,cAAA,WAEAQ,EAAAT,EAAAC,cAAA,OAAKC,UAAU,OACbO,EAAAT,EAAAC,cAAA,OAAKC,UAAU,OACbO,EAAAT,EAAAC,cAACS,EAAA,EAAD,QAIJD,EAAAT,EAAAC,cAAA,WAEAQ,EAAAT,EAAAC,cAAA,KAAGU,MAAO,CAACC,SAAS,SAAYH,EAAAT,EAAAC,cAAA,wMAChCQ,EAAAT,EAAAC,cAAA,mBAtBUM,cCOEM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOV,EAAAT,EAAAC,cAACmB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,+CExHV,SAASC,EAAYC,EAAOC,EAAcC,GAC/C,GAAIF,GAASA,EAAMG,OAAS,EAAG,CAC3B,IAAMC,EAAcJ,EAAM,GACpBK,EAAkBD,EAAYE,KAEpC,OADwBF,EAAYG,KACdN,GAClBO,QAAQC,IAAI,2BACL,KAENP,EAAuBQ,SAASL,KACjCG,QAAQC,IAAI,iCACL,IAMV,SAASpD,EAAasD,EAAOrD,EAAOC,GAczC,OAZID,EAAQC,EACND,EAAQqD,IACRpD,GAAUoD,EAAQrD,EAClBA,EAAQqD,GAGNpD,EAASoD,IACTrD,GAASqD,EAAQpD,EACjBA,EAASoD,GAIV,CAAErD,QAAOC,UAIX,SAASqD,EAAyB7C,GACrC,QAAO,GACH,KAAMA,GAAc,GAClB,MAAO,gCACT,KAAMA,EAAa,IAAMA,GAAc,GACrC,MAAO,oCACT,KAAMA,EAAa,IAAMA,GAAc,GACrC,MAAO,mCACT,KAAMA,EAAa,IAAMA,GAAc,GACrC,MAAO,qCACT,QACE,MAAO,uCAgBV,SAAS8C,EAAaC,GAC3B,OAAO,IAAIC,QAAQ,SAACC,EAASC,GACzB,IAAIC,EAAM,IAAIC,MACdD,EAAIE,IAAMN,EACVI,EAAIG,iBAAiB,OAAQ,WACzB,OAAOL,EAAQE,KAEnBA,EAAIG,iBAAiB,QAASJ,KA/EpCK,EAAAC,EAAAC,EAAA,sBAAAzB,IAAAuB,EAAAC,EAAAC,EAAA,sBAAAnE,IAAAiE,EAAAC,EAAAC,EAAA,sBAAAZ,IAAAU,EAAAC,EAAAC,EAAA,sBAAAX,+LCeFY,IAAIC,OAAOC,OAHQC,iBAInBH,IAAIC,OAAOG,YAAc,IAAIJ,IAAIK,2BAA2B,CACxDC,eAJyBH,wDAO7B,IAAM3B,EAAe,SACf+B,EAAoB,CAAC,cAAe,YAAa,YAAa,aAAc,aAC5ErB,EAAQ,IAERsB,EAAU,SAAAC,GAAA,IAAE1D,EAAF0D,EAAE1D,MAAO2D,EAATD,EAASC,KAAT,OACZC,EAAAlE,EAAAC,cAAA,WACIiE,EAAAlE,EAAAC,cAAA,UAAMK,GACN4D,EAAAlE,EAAAC,cAAA,KAAGC,UAAU,sBAAuB+D,KAItCE,EAAoB,SAAAC,GAAA,IAAE5F,EAAF4F,EAAE5F,QAAF,OACtB0F,EAAAlE,EAAAC,cAAA,OAAKC,UAAU,2BAA2BmE,KAAK,SAC3CH,EAAAlE,EAAAC,cAAA,oCAA8BiE,EAAAlE,EAAAC,cAAA,WAC9BiE,EAAAlE,EAAAC,cAAA,qCAA4BiE,EAAAlE,EAAAC,cAAA,QAAMC,UAAU,WAAW1B,QAASA,GAApC,cAA5B,mCAIF8F,EAAkB,SAAAC,GAAA,IAAE/F,EAAF+F,EAAE/F,QAAF,OACpB0F,EAAAlE,EAAAC,cAAA,OAAKC,UAAU,yBAAyBmE,KAAK,SACzCH,EAAAlE,EAAAC,cAAA,yDAAmDiE,EAAAlE,EAAAC,cAAA,WACnDiE,EAAAlE,EAAAC,cAAA,yBAAgBiE,EAAAlE,EAAAC,cAAA,QAAMC,UAAU,WAAW1B,QAASA,GAApC,cAAhB,gBAIFgG,EAAqB,kBACvBN,EAAAlE,EAAAC,cAAA,OAAKC,UAAU,4BAA4BmE,KAAK,SAC5CH,EAAAlE,EAAAC,cAAA,mBADJ,sDAKEwE,EAAgB,SAAAC,GAAA,IAAEC,EAAFD,EAAEC,OAAQzB,EAAVwB,EAAUxB,IAAKtE,EAAf8F,EAAe9F,WAAYJ,EAA3BkG,EAA2BlG,QAA3B,OAClB0F,EAAAlE,EAAAC,cAAA,WACIiE,EAAAlE,EAAAC,cAACqE,EAAD,CAAiB9F,QAASA,IAC1B0F,EAAAlE,EAAAC,cAAA,OAAKC,UAAU,OACXgE,EAAAlE,EAAAC,cAAA,OAAKC,UAAU,QACfgE,EAAAlE,EAAAC,cAAA,OAAKC,UAAU,YACXgE,EAAAlE,EAAAC,cAAA,SAAO2E,YAAY,IAAIC,YAAY,IAAIC,OAAO,IAAI1F,MAAM,QACpD8E,EAAAlE,EAAAC,cAAA,aACE0E,EAAOI,IAAI,SAACC,EAAIC,GAAL,OAAWf,EAAAlE,EAAAC,cAACiF,EAAA,EAAD,CAAUxG,MAAOsG,EAAKzF,QAAS2D,EAAI,GAAItE,WAAYA,EAAYuG,IAAKF,SAIpGf,EAAAlE,EAAAC,cAAA,OAAKC,UAAU,WAKrBQ,cAEF,SAAAA,EAAahD,GAAO,IAAAC,EAAA,OAAAC,OAAAwH,EAAA,EAAAxH,CAAAE,KAAA4C,IAChB/C,EAAAC,OAAAyH,EAAA,EAAAzH,CAAAE,KAAAF,OAAA0H,EAAA,EAAA1H,CAAA8C,GAAAzC,KAAAH,KAAMJ,KAmBV6H,0BAA4B,SAACC,EAAeC,GACpCA,GAAiBA,EAAcxD,OAAS,IACrBJ,YAAW4D,EAAe1D,EAAc+B,IAEvD4B,MAAM,0DAId/H,EAAKgI,OAAOH,EAAe,eA5BX7H,EA+BpBiI,2BAA6B,SAACJ,EAAeC,GACrCA,GAAiBA,EAAcxD,OAAS,IACrBJ,YAAW4D,EAAe1D,EAAc+B,IAEvD4B,MAAM,0DAId/H,EAAKgI,OAAOH,EAAe,gBAvCX7H,EA0CpBgI,OA1CoB,eAAAE,EAAAjI,OAAAkI,EAAA,EAAAlI,CAAAmI,EAAA/F,EAAAgG,KA0CX,SAAAC,EAAOT,EAAeU,GAAtB,IAAAhE,EAAAiE,EAAA,OAAAJ,EAAA/F,EAAAoG,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAEDf,GAAiBA,EAAcvD,OAAS,IACrBJ,YAAW2D,EAAezD,EAAc+B,IAEjD5B,EAAcsD,EAAc,GAC5BW,EAAS,IAAIK,WAED,eAAdN,EACAvI,EAAK8I,SAAS,CACVC,mBAAqB,YAGzB/I,EAAK8I,SAAS,CACVE,mBAAqB,YAI7BR,EAAOhD,iBAAiB,OAAxBvF,OAAAkI,EAAA,EAAAlI,CAAAmI,EAAA/F,EAAAgG,KAAgC,SAAAY,IAAA,IAAAC,EAAA7D,EAAA8D,EAAAnI,EAAA,OAAAoH,EAAA/F,EAAAoG,KAAA,SAAAW,GAAA,cAAAA,EAAAT,KAAAS,EAAAR,MAAA,cACtBM,EAAeV,EAAOxB,OADAoC,EAAAR,KAAA,EAEV5D,YAAakE,GAFH,OAEtB7D,EAFsB+D,EAAAC,KAItBF,EAAS,CAACD,EAAaI,MAAM,KAAK,GAAIjE,GAC1B,eAAdkD,GACAvI,EAAK8I,SAAS,CACVS,SAAUJ,IAEdnJ,EAAKwJ,YAAYnE,EAAKkD,KAEtBvI,EAAK8I,SAAS,CACVW,SAAUN,IAENnI,EAAkBhB,EAAK0J,MAAvB1I,cACRhB,EAAK2J,aAAa3I,EAAemI,EAAO,KAfhB,wBAAAC,EAAAQ,SAAAX,EAAA9I,UAkB7B,GACHqI,EAAOqB,cAActF,IAErBwD,MAAM,0DAvCT,wBAAAW,EAAAkB,SAAAtB,EAAAnI,SA1CW,gBAAA2J,EAAAC,GAAA,OAAA7B,EAAA8B,MAAA7J,KAAA8J,YAAA,GAAAjK,EA0JpBwJ,YA1JoB,eAAAU,EAAAjK,OAAAkI,EAAA,EAAAlI,CAAAmI,EAAA/F,EAAAgG,KA0JN,SAAA8B,EAAO9E,EAAK+E,GAAZ,IAAA7E,EAAA8E,EAAAC,EAAAC,EAAAC,EAAA,OAAApC,EAAA/F,EAAAoG,KAAA,SAAAgC,GAAA,cAAAA,EAAA9B,KAAA8B,EAAA7B,MAAA,cAEJrD,EAAMF,EAAIE,IACV8E,EAAc9E,EAAI+D,MAAM,KAAK,GAE7BgB,EAAc,IAAI1E,IAAI8E,YACtBH,EAAoBD,EAAYd,YAClC,CAAElE,MAAO,CAAEqF,MAAOC,EAAOC,KAAKR,EAAa,WAAaS,WAAY,CAAC,SACvEC,UARQN,EAAA7B,KAAA,EAUmB2B,EAVnB,YAY2BpI,KAFjCqI,EAVMC,EAAApB,MAYW2B,aAAqE,IAAxCR,EAAiBQ,YAAY1G,OAC3EtE,EAAKiL,kBAAkB5F,EAAKmF,EAAiBQ,YAAaZ,IAE1DrC,MAAM,mDAEY,eAAdqC,EACApK,EAAK8I,SAAS,CACVS,SAAU,KAGdvJ,EAAK8I,SAAS,CACVW,SAAU,MAvBZ,wBAAAgB,EAAAb,SAAAO,EAAAhK,SA1JM,gBAAA+K,EAAAC,GAAA,OAAAjB,EAAAF,MAAA7J,KAAA8J,YAAA,GAAAjK,EAuLpB2J,aAvLoB,eAAAyB,EAAAnL,OAAAkI,EAAA,EAAAlI,CAAAmI,EAAA/F,EAAAgG,KAuLL,SAAAgD,EAAOC,EAAQC,GAAf,IAAAC,EAAAlB,EAAAmB,EAAAC,EAAAC,EAAAlC,EAAA1I,EAAA6K,EAAAC,EAAAC,EAAA5J,EAAA6J,EAAAlK,EAAAC,EAAAL,EAAAC,EAAAM,EAAA,OAAAoG,EAAA/F,EAAAoG,KAAA,SAAAuD,GAAA,cAAAA,EAAArD,KAAAqD,EAAApD,MAAA,cAEL4C,EAAoB,CACtBS,oBAAqB,GACrBC,YAAa,CAAEvB,MAAOC,EAAOC,KAAKS,EAAQ,WAC1Ca,YAAa,CAAExB,MAAOC,EAAOC,KAAKU,EAAQ,YAGxCjB,EAAc,IAAI1E,IAAI8E,YACxBe,EAAqBnB,EAAYX,aAAa6B,GAAmBT,UAT1DiB,EAAApD,KAAA,EAUmB6C,EAVnB,OAYX,QAAsCtJ,KAFlCuJ,EAVOM,EAAA3C,MAYW+C,aAAsE,IAAzCV,EAAkBU,YAAY9H,OAAc,CAO3F,IANIqH,EAAUD,EAAkBU,YAExB3C,EAAazJ,EAAK0J,MAAlBD,SACJ1I,EAAQ4K,EAAQrH,OAChBsH,EAAM,EACNC,EAAkB,GACjBD,EAAI,EAAEA,EAAI7K,EAAM6K,IACXE,EAAcH,EAAQC,GAAR,KAAqBS,YACnCnK,EAAaoK,KAAKC,MAAmC,IAA7BZ,EAAQC,GAAR,YAAoC,IAF1CG,EAKQ/L,EAAKwM,uBAAuBV,EAAarC,EAAS,IAA1E5H,EALgBkK,EAKhBlK,EAAGC,EALaiK,EAKbjK,EAAGL,EALUsK,EAKVtK,MAAOC,EALGqK,EAKHrK,OAEfM,EAAc+C,YAAyB7C,GAC7C2J,EAAgBD,GAAO,CAAE/J,IAAGC,IAAGL,QAAOC,SAAQQ,aAAYD,KAAO2J,EAAI,EAAI5J,eAE7EhC,EAAK8I,SAAS,CAAE2D,cAAeZ,IA7BxB,wBAAAG,EAAApC,SAAAyB,EAAAlL,SAvLK,gBAAAuM,EAAAC,GAAA,OAAAvB,EAAApB,MAAA7J,KAAA8J,YAAA,GAAAjK,EA4NpB4M,eAAiB,SAACC,GACVA,GAAOA,EAAMC,iBACjB9M,EAAK8I,SAAS9I,EAAK+M,eA9NH/M,EAiOpBgN,aAAe,SAAClM,GAAiB,IAErByI,EAAavJ,EAAK0J,MAAlBH,SACFpI,EAASnB,EAAKiN,kBAAkB7L,QAChCC,EAAMF,EAAOG,WAAW,MAJDC,EAMHC,YAAasD,EAAOhE,EAAaW,MAAOX,EAAaY,QAAvED,EANqBF,EAMrBE,MAAOC,EANcH,EAMdG,OAEfP,EAAOM,MAAQA,EAAQ,GACvBN,EAAOO,OAASA,EAAS,GACzBL,EAAIM,UACA4H,EAAS,GACTzI,EAAae,EACbf,EAAagB,EACbhB,EAAaW,MACbX,EAAaY,OACb,EACA,EACAD,EACAC,GAGJ,IAAMwL,EAAU/L,EAAOgM,YACvBnN,EAAK8I,SAAS,CACV9H,cAAekM,EAAQ5D,MAAM,KAAK,MAvPtCtJ,EAAKiN,kBAAoBzM,IAAMC,YAC/BT,EAAKoN,kBAAoB5M,IAAMC,YAC/BT,EAAK0J,MAAQ,CACTH,SAAU,GACVE,SAAU,GACVV,mBAAoB,aACpBC,mBAAoB,aACpBqE,oBAAqB,GACrBrM,cAAe,KACfyL,cAAe,IAXHzM,oFAiBhBG,KAAK4M,aAAe5M,KAAKuJ,qDAqENoC,EAAazG,GAOhC,IAAMiI,EAAWjI,EAAIkI,aACfC,EAAYnI,EAAIoI,cAMtB,MAAO,CACH5L,EALMiK,EAAY4B,KAAOJ,EAKtBxL,EAJGgK,EAAY6B,IAAMH,EAIlB/L,MAHIqK,EAAY8B,MAAQN,EAGjB5L,OAFFoK,EAAY+B,OAASL,6CAOrBnI,EAAKyI,EAAY1D,GAChC,IAAMrJ,EAAQ+M,EAAWxJ,OACjBiF,EAAapJ,KAAKuJ,MAAlBH,SAEJwE,EAAexE,EAAS,GAC5BpJ,KAAK2I,SAAS,CACVC,mBAAoB,WAGV,IAAVhI,GACAZ,KAAK2I,SAAS,CACV9H,cAAeuI,EAAS,KAGhC,IAAMpI,EAAShB,KAAK8M,kBAAkB7L,QAChCC,EAAMF,EAAOG,WAAW,MAExB0M,EAAY3I,EAAIkI,aAChBU,EAAa5I,EAAIoI,cAlBoBS,EAmBjB1M,YAAasD,EAAOkJ,EAAWC,GAAjDxM,EAnBmCyM,EAmBnCzM,MAAOC,EAnB4BwM,EAmB5BxM,OAEf2D,EAAI5D,MAAQA,EACZ4D,EAAI3D,OAASA,EACbP,EAAOM,MAAQA,EACfN,EAAOO,OAASA,EAChBL,EAAIM,UAAU0D,EAAK,EAAG,EAAG2I,EAAWC,EAAY,EAAG,EAAGxM,EAAOC,GAG7D,IAAIkK,EAAM,EACNC,EAAkB,GAEtB,IAAKD,EAAI,EAAEA,EAAI7K,EAAM6K,IAAO,CACxB,IAAME,EAAcgC,EAAWlC,GAAKS,YAC9B8B,EAAWL,EAAWlC,GAAKwC,SAFTC,EAKQlO,KAAKqM,uBAAuBV,EAAaiC,GAAjElM,EALgBwM,EAKhBxM,EAAGC,EALauM,EAKbvM,EAAGL,EALU4M,EAKV5M,MAAOC,EALG2M,EAKH3M,OAGrBmK,EAAgBD,GAAO,CAAE/J,IAAGC,IAAGL,QAAOC,SAAQ4M,IAAKH,GAGvDhO,KAAK2I,SAAS,CACVuE,oBAAqBxB,qCAyGpB,IAAA0C,EAAApO,KAAAqO,EASDrO,KAAKuJ,MAPLH,EAFCiF,EAEDjF,SACAR,EAHCyF,EAGDzF,mBACAU,EAJC+E,EAID/E,SACAT,EALCwF,EAKDxF,mBACAqE,EANCmB,EAMDnB,oBACArM,EAPCwN,EAODxN,cACAyL,EARC+B,EAQD/B,cAEJ,OACIlG,EAAAlE,EAAAC,cAAA,OAAKC,UAAU,aAERkK,EAAcnI,OAAS,GAAKmF,EAASnF,OAAS,EACjDiC,EAAAlE,EAAAC,cAACwE,EAAD,CAAeE,OAAQyF,EAAelH,IAAKkE,EAAUxI,WAAYD,EAAeH,QAASV,KAAKyM,iBAE9FrG,EAAAlE,EAAAC,cAAA,WACIiE,EAAAlE,EAAAC,cAAA,OAAKC,UAAU,MAAMS,MAAO,CAACyL,QAAQ,SAEjClI,EAAAlE,EAAAC,cAAA,OAAKC,UAAU,YACU,OAAlBvB,EAA0BuF,EAAAlE,EAAAC,cAACuE,EAAD,MAAyB,KAC5B,eAAvBkC,EACCxC,EAAAlE,EAAAC,cAACoM,EAAA,EAAD,CAAU1G,OAAQ7H,KAAKyH,0BAA2B+G,OAAO,UAAUC,QAASxK,EAAcyK,UAAU,GACnG,SAAAC,GAAiD,IAA/CC,EAA+CD,EAA/CC,aAAcC,EAAiCF,EAAjCE,cAAeC,EAAkBH,EAAlBG,aAC5B,OACI1I,EAAAlE,EAAAC,cAAA,MAAArC,OAAAiP,OAAA,GAASH,IAAT,CAAyBxM,UAAW4M,IAAW,WAAY,CAACC,qBAAsBH,MAC9E1I,EAAAlE,EAAAC,cAAA,QAAW0M,KACXzI,EAAAlE,EAAAC,cAAC8D,EAAD,CAASzD,MAAM,SAAS2D,KAAO2I,EAAe,yCAA2C,8EAKrG1I,EAAAlE,EAAAC,cAAA,OAAKG,MAAM,UACmB,YAAvBsG,EAAqCxC,EAAAlE,EAAAC,cAAA,OAAKC,UAAU,WACvDgE,EAAAlE,EAAAC,cAAA,UAAQC,UAAU,yBAAyBC,IAAKrC,KAAK8M,sBAK5C,OAAlBjM,EACHuF,EAAAlE,EAAAC,cAAA,OAAKC,UAAU,OACe,eAAvByG,EACCzC,EAAAlE,EAAAC,cAACoM,EAAA,EAAD,CAAU1G,OAAQ7H,KAAK8H,2BAA4B0G,OAAO,UAAUC,QAASxK,EAAcyK,UAAU,GACpG,SAAAQ,GAAiD,IAA/CN,EAA+CM,EAA/CN,aAAcC,EAAiCK,EAAjCL,cAAeC,EAAkBI,EAAlBJ,aAC5B,OACI1I,EAAAlE,EAAAC,cAAA,MAAArC,OAAAiP,OAAA,GAASH,IAAT,CAAyBxM,UAAW4M,IAAW,WAAY,CAACC,qBAAsBH,MAC9E1I,EAAAlE,EAAAC,cAAA,QAAW0M,KACXzI,EAAAlE,EAAAC,cAAC8D,EAAD,CAASzD,MAAM,SAAS2D,KAAO2I,EAAe,yCAA2C,8EAKrG1I,EAAAlE,EAAAC,cAAA,OAAKG,MAAM,UACmB,YAAvBuG,EAAqCzC,EAAAlE,EAAAC,cAAA,OAAKC,UAAU,WACvDgE,EAAAlE,EAAAC,cAAA,UAAQC,UAAU,yBAAyBC,IAAKrC,KAAKiN,sBAKxD,MAGb7G,EAAAlE,EAAAC,cAAA,OAAKC,UAAU,OAEXgE,EAAAlE,EAAAC,cAAA,OAAKC,UAAU,YACXgE,EAAAlE,EAAAC,cAAA,OAAKC,UAAU,OACT8K,EAAoB/I,OAAS,EAAIiC,EAAAlE,EAAAC,cAACkE,EAAD,CAAmB3F,QAASV,KAAKyM,iBAAqB,KACtFS,EAAoB/I,OAAS,GAAKiF,EAASjF,OAAS,EACvD+I,EAAoBjG,IAChB,SAACC,EAAIC,GAAL,OAAWf,EAAAlE,EAAAC,cAACiF,EAAA,EAAD,CAAUxG,MAAOsG,EAAKzF,QAAS2H,EAAS,GAAI1I,QAAU,kBAAM0N,EAAKvB,aAAa3F,IAAOG,IAAKF,MAE3Gf,EAAAlE,EAAAC,cAAA,OAAKC,UAAU,oBAvUpB/B,IAAMoC,WAkVhBG","file":"static/js/main.70c00ffd.chunk.js","sourcesContent":["import React from 'react'\n\nimport { \n    getThumbSize\n} from './functions'\n\nclass MyCanvas extends React.Component {\n \n    constructor (props) {\n        super(props)\n        this.myCanvasRef = React.createRef()\n        this.thumbWidth = 80\n        this.thumbHeight = 80\n        \n        this.canvasOnClick = this.props.onClick\n\n        this.imageDetails = this.props.faces;  \n        this.compareSource = this.props.compareSrc \n    }\n\n    componentDidMount() {\n        this.updateCanvas();\n    }\n\n    updateCanvas() {        \n        const imageDetails = this.imageDetails\n\n        const canvas = this.myCanvasRef.current\n        const ctx = canvas.getContext('2d');\n        \n        const { width, height } = getThumbSize(this.thumbWidth, imageDetails.width, imageDetails.height);\n        \n        canvas.width = width; \n        canvas.height = height;\n        ctx.drawImage(\n            this.props.origSrc,\n            imageDetails.x,\n            imageDetails.y,\n            imageDetails.width,\n            imageDetails.height,\n            0,\n            0,\n            width,\n            height\n        )\n    }\n\n    render() {\n        const { description, rank, similarity } = this.imageDetails;\n        return (\n            (this.compareSource === undefined) ? \n            <div className=\"col\">\n                <canvas className=\"dropzone-image-preview rounded-circle\" ref={this.myCanvasRef} onClick={this.canvasOnClick} ></canvas>\n            </div> : \n            <tr>\n                    <td align=\"left\"><b># { rank }</b></td>\n                    <td align=\"left\">\n                        <canvas className=\"dropzone-image-preview rounded-circle\" ref={this.myCanvasRef} onClick={this.canvasOnClick} ></canvas>\n                    </td>\n                    <td align=\"left\">\n                        <span data-toggle=\"tooltip\" title={'Similarity score: ' + similarity + '%'}>\n                            { description }\n                        </span>\n                    </td>\n            </tr>\n        );\n    }\n}\n\nexport default MyCanvas;","import React, { Component } from 'react';\nimport MyDropzone from './components/MyDropzone.jsx';\n\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n\n        <hr />\n\n        <h2><b>Wanna gauge your likeness with someone?</b></h2>\n        <h3>Upload a photo here and the person you wanna checkout!</h3>\n        <h4>No worries, you can load photos with multiple faces.</h4>\n\n        <hr />\n\n        <div className=\"row\">\n          <div className=\"col\">\n            <MyDropzone />  \n          </div>\n        </div>\n\n        <hr />\n        \n        <p style={{fontSize:10 + 'px'}}><em>Disclaimer: This demo is for fun only. No images are stored. Amazon Rekognition face comparison is a stateless API operation. That is, data returned by this operation doesn't persist.  </em></p>\n        <hr />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","  \n  export function downloadBase64File (base64Data, filename) {\n    var element = document.createElement('a')\n    element.setAttribute('href', base64Data)\n    element.setAttribute('download', filename)\n    element.style.display = 'none'\n    document.body.appendChild(element)\n    element.click()\n    document.body.removeChild(element)\n  }\n    \n  export function verifyFile (files, imageMaxSize, acceptedFileTypesArray) {\n    if (files && files.length > 0) {\n        const currentFile = files[0]\n        const currentFileType = currentFile.type \n        const currentFileSize = currentFile.size \n        if (currentFileSize > imageMaxSize) {\n            console.log('Image file is too big!')\n            return false\n        }\n        if (!acceptedFileTypesArray.includes(currentFileType)) {\n            console.log('Only image file is accepted.')\n            return false\n        }\n        return true\n    }\n  }\n  \n  export function getThumbSize(maxWH, width, height) {\n  \n    if (width > height) {\n      if (width > maxWH) {\n          height *= maxWH / width;\n          width = maxWH;\n      }\n    } else {\n        if (height > maxWH) {\n            width *= maxWH / height;\n            height = maxWH;\n        }\n    }\n  \n    return { width, height }\n    \n  }\n\n  export function getSimilarityDescription(similarity) {\n      switch(true) {\n          case (similarity >= 90) :\n            return \"Hey! This is the same person!\";\n          case (similarity < 90 && similarity >= 70) :\n            return \"Whoah! You got your doppelganger!\";\n          case (similarity < 70 && similarity >= 50) : \n            return \"Oh, looks like a close relative!\";\n          case (similarity < 50 && similarity >= 30) : \n            return \"Yay! There's a slight resemblance!\";\n          default: \n            return \"Almost but not quite. ;) Try again!\";\n      }\n  }\n  \n  export function drawImageOnCanvas(canvas, img, crop) {\n    const ctx = canvas.getContext('2d');\n    \n    const { sx, sy, swidth, sheight, x, y, width, height } = crop\n    \n    img.width = width; \n    img.height = height;\n    canvas.width = width; \n    canvas.height = height;\n    ctx.drawImage(img, sx, sy, swidth, sheight, x, y, width, height);\n  }\n  \n  export function preloadImage(url) {               \n    return new Promise((resolve, reject) => {\n        var img = new Image();\n        img.src = url;\n        img.addEventListener('load', () => {\n            return resolve(img)\n        });\n        img.addEventListener('error', reject); // don't forget this one\n    });\n  }","import React from 'react'\nimport classNames from 'classnames'\nimport Dropzone from 'react-dropzone'\nimport AWS from 'aws-sdk'\n\nimport { \n    getSimilarityDescription, \n    getThumbSize, \n    preloadImage, \n    verifyFile\n} from './functions'\nimport MyCanvas from './MyCanvas.jsx'\n\nconst AWS_REGION = process.env.REACT_APP_AWS_REGION;\nconst AWS_IDENTITY_POOL_ID = process.env.REACT_APP_AWS_IDENTITY_POOL_ID;\n\nAWS.config.region = AWS_REGION;\nAWS.config.credentials = new AWS.CognitoIdentityCredentials({\n    IdentityPoolId: AWS_IDENTITY_POOL_ID\n});\n\nconst imageMaxSize = 10485760; // bytes (10mb)\nconst acceptedFileTypes = ['image/x-png', 'image/png', 'image/jpg', 'image/jpeg', 'image/gif'];\nconst maxWH = 250; // max width and height of the preview of uploaded canvas images\n\nconst DivStep = ({title, note}) => (\n    <div>\n        <h1>{ title }</h1>\n        <p className=\"dropzone-paragraph\">{ note }</p>\n    </div>\n);\n\nconst UploadDangerAlert = ({onClick}) => (\n    <div className=\"w-100 alert alert-danger\" role=\"alert\">\n        <b>Multiple Faces Detected</b><br />\n        <em>Choose one to select or <span className=\"span-btn\" onClick={onClick}>click here</span> to upload a new one instead:</em>\n    </div>\n);\n\nconst UploadInfoAlert = ({onClick}) => (\n    <div className=\"w-100 alert alert-info\" role=\"alert\">\n        <b>Similarity score ranking is displayed below!</b><br />\n        <em>Having fun? <span className=\"span-btn\" onClick={onClick}>Click here</span> to retry!</em>\n    </div>\n);\n\nconst UploadSuccessAlert = () => (\n    <div className=\"w-100 alert alert-success\" role=\"alert\">\n        <b>Great!</b> Now proceed to Step 2 and upload the next photo.\n    </div>\n)\n\nconst CompareResult = ({result, src, compareSrc, onClick}) => (\n    <div>\n        <UploadInfoAlert onClick={onClick} />\n        <div className=\"row\">\n            <div className=\"col\"></div>\n            <div className=\"col-md-6\">\n                <table cellPadding=\"5\" cellSpacing=\"5\" border=\"0\" width=\"100%\">\n                    <tbody>\n                    { result.map((arr,i) => <MyCanvas faces={arr} origSrc={src[1]} compareSrc={compareSrc} key={i} />) }\n                    </tbody>\n                </table>\n            </div>\n            <div className=\"col\"></div>\n        </div>\n    </div>\n)\n\nclass MyDropzone extends React.Component {\n\n    constructor (props) {\n        super(props)\n        this.imgStep1CanvasRef = React.createRef()\n        this.imgStep2CanvasRef = React.createRef()\n        this.state = {\n            imgStep1: [], \n            imgStep2: [], \n            imgStep1LoadStatus: 'not loaded',\n            imgStep2LoadStatus: 'not loaded',\n            imgStep1FaceDetails: [], \n            compareSource: null, \n            compareResult: []\n        }\n    }\n    \n    componentWillMount() {\n        // save the current state into an initial state variable to make it easier to reset state later on\n        this.initialState = this.state\n    }\n\n    handleOnDropForstep1Image = (acceptedFiles, rejectedFiles) => {\n        if (rejectedFiles && rejectedFiles.length > 0) {\n            const isVerified = verifyFile(rejectedFiles, imageMaxSize, acceptedFileTypes)\n            if (!isVerified) {\n                alert('Please check image size (<10mb) or file type (image).')\n            }\n        }\n\n        this.onDrop(acceptedFiles, 'step1Image')\n    }\n\n    handleOnDropForParentImage = (acceptedFiles, rejectedFiles) => {\n        if (rejectedFiles && rejectedFiles.length > 0) {\n            const isVerified = verifyFile(rejectedFiles, imageMaxSize, acceptedFileTypes)\n            if (!isVerified) {\n                alert('Please check image size (<10mb) or file type (image).')\n            }\n        }\n\n        this.onDrop(acceptedFiles, 'parentImage')\n    }\n\n    onDrop = async (acceptedFiles, stateFlag) => {\n\n        if (acceptedFiles && acceptedFiles.length > 0) {\n            const isVerified = verifyFile(acceptedFiles, imageMaxSize, acceptedFileTypes)\n            if (isVerified) {\n                const currentFile = acceptedFiles[0]\n                const reader = new FileReader()\n                \n                if (stateFlag === 'step1Image') {\n                    this.setState({\n                        imgStep1LoadStatus : 'loading'\n                    }) \n                } else {\n                    this.setState({\n                        imgStep2LoadStatus : 'loading'\n                    })\n                }\n\n                reader.addEventListener(\"load\", async () => {\n                    const readerResult = reader.result\n                    const img = await preloadImage(readerResult);\n\n                    const imgArr = [readerResult.split(',')[1], img]\n                    if (stateFlag === 'step1Image') {\n                        this.setState({\n                            imgStep1: imgArr\n                        })\n                        this.detectFaces(img, stateFlag)\n                    } else {\n                        this.setState({\n                            imgStep2: imgArr\n                        })\n                        const { compareSource } = this.state;\n                        this.compareFaces(compareSource, imgArr[0]);\n                    }\n                    \n                }, false)\n                reader.readAsDataURL(currentFile)\n            } else {\n                alert('Please check image size (<10mb) or file type (image).')\n            }\n        }\n    }\n\n    calculateBoundingLines(boundingBox, img) {\n        /*\n            Left coordinate = BoundingBox.Left (0.3922065) * image width (608) = 238\n            Top coordinate = BoundingBox.Top (0.15567766) * image height (588) = 91\n            Face width = BoundingBox.Width (0.284666) * image width (608) = 173\n            Face height = BoundingBox.Height (0.2930403) * image height (588) = 172\n        */\n        const imgWidth = img.naturalWidth;\n        const imgHeight = img.naturalHeight;\n\n        const x = boundingBox.Left * imgWidth;\n        const y = boundingBox.Top * imgHeight;  \n        const width = boundingBox.Width * imgWidth;\n        const height = boundingBox.Height * imgHeight;\n        return {\n            x, y, width, height \n        }\n    }\n\n\n    updateStep1Canvas (img, faceObject, imageFlag) {\n        const faces = faceObject.length;\n        const { imgStep1 } = this.state;\n        \n        var imgPreloaded = imgStep1[1];\n        this.setState({\n            imgStep1LoadStatus: 'loaded'\n        })\n        \n        if (faces === 1) {\n            this.setState({\n                compareSource: imgStep1[0]\n            })\n        }\n        const canvas = this.imgStep1CanvasRef.current\n        const ctx = canvas.getContext('2d');\n        \n        const origWidth = img.naturalWidth;\n        const origHeight = img.naturalHeight;\n        const { width, height } = getThumbSize(maxWH, origWidth, origHeight);\n        \n        img.width = width; \n        img.height = height;\n        canvas.width = width; \n        canvas.height = height;\n        ctx.drawImage(img, 0, 0, origWidth, origHeight, 0, 0, width, height);\n\n        \n        var ctr = 0;\n        var imageDetailsArr = [];\n\n        for (ctr=0;ctr<faces;ctr++) {\n            const boundingBox = faceObject[ctr].BoundingBox;\n            const ageRange = faceObject[ctr].AgeRange;\n            \n            // Get bounding boxes\n            const { x, y, width, height } = this.calculateBoundingLines(boundingBox, imgPreloaded);\n\n            // Save mapping values for the canvas element\n            imageDetailsArr[ctr] = { x, y, width, height, age: ageRange }\n        }\n\n        this.setState({\n            imgStep1FaceDetails: imageDetailsArr\n        })\n             \n    }\n\n    detectFaces = async (img, imageFlag) => {\n        \n        const src = img.src;\n        const base64Image = src.split(',')[1]\n\n        const rekognition = new AWS.Rekognition();\n        const detectFaceRequest = rekognition.detectFaces(\n            { Image: { Bytes: Buffer.from(base64Image, 'base64') }, Attributes: [\"ALL\"] }\n        ).promise();\n        \n        let detectFaceResult = await detectFaceRequest;\n        \n        if (detectFaceResult.FaceDetails !== undefined && detectFaceResult.FaceDetails.length !== 0) {\n            this.updateStep1Canvas(img, detectFaceResult.FaceDetails, imageFlag);\n        } else {\n            alert(\"No face detected, please re-upload a new image.\");\n            // no face detected, clear state for image upload\n            if (imageFlag === 'step1Image') {\n                this.setState({ \n                    imgStep1: []\n                })\n            } else {\n                this.setState({ \n                    imgStep2: []\n                })\n            }\n        }\n    }\n\n    compareFaces = async (source, target) =>  {\n        \n        const compareFaceParams = {\n            SimilarityThreshold: 10,\n            SourceImage: { Bytes: Buffer.from(source, 'base64') }, \n            TargetImage: { Bytes: Buffer.from(target, 'base64') }\n        };\n\n        const rekognition = new AWS.Rekognition();\n        var compareFaceRequest = rekognition.compareFaces(compareFaceParams).promise();          \n        let compareFaceResult = await compareFaceRequest;\n        // console.log(compareFaceResult)\n        if (compareFaceResult.FaceMatches !== undefined && compareFaceResult.FaceMatches.length !== 0) {\n            var faceArr = compareFaceResult.FaceMatches;\n\n            const { imgStep2 } = this.state;\n            var faces = faceArr.length;\n            var ctr = 0;\n            var imageDetailsArr = [];\n            for (ctr=0;ctr<faces;ctr++) {\n                const boundingBox = faceArr[ctr]['Face'].BoundingBox;\n                const similarity = Math.round(faceArr[ctr]['Similarity'] * 100) / 100;\n                \n                // Get bounding boxes\n                const { x, y, width, height } = this.calculateBoundingLines(boundingBox, imgStep2[1]);\n\n                const description = getSimilarityDescription(similarity)\n                imageDetailsArr[ctr] = { x, y, width, height, similarity, rank: (ctr+1), description }\n            }\n            this.setState({ compareResult: imageDetailsArr })\n        }\n        \n        \n    \n    }\n\n    // public class fields syntax -> https://reactjs.org/docs/handling-events.html\n    clearToDefault = (event) => {\n        if (event) event.preventDefault()\n        this.setState(this.initialState)\n    }\n\n    onThumbClick = (imageDetails) => {\n        \n        const { imgStep1 } = this.state;\n        const canvas = this.imgStep1CanvasRef.current\n        const ctx = canvas.getContext('2d');\n        \n        const { width, height } = getThumbSize(maxWH, imageDetails.width, imageDetails.height);\n        \n        canvas.width = width + 10; \n        canvas.height = height + 10;\n        ctx.drawImage(\n            imgStep1[1],\n            imageDetails.x,\n            imageDetails.y,\n            imageDetails.width,\n            imageDetails.height,\n            5,\n            5,\n            width,\n            height\n        )\n\n        const dataURL = canvas.toDataURL()\n        this.setState({\n            compareSource: dataURL.split(',')[1]\n        })\n\n    }\n\n    render() {\n        const {\n            imgStep1, \n            imgStep1LoadStatus, \n            imgStep2,\n            imgStep2LoadStatus, \n            imgStep1FaceDetails, \n            compareSource, \n            compareResult\n        } = this.state; \n        return (\n            <div className=\"container\">\n                \n                { (compareResult.length > 0 && imgStep2.length > 0) ?  \n                <CompareResult result={compareResult} src={imgStep2} compareSrc={compareSource} onClick={this.clearToDefault} />\n                : \n                <div>\n                    <div className=\"row\" style={{padding:20 + 'px'}}>\n                        \n                        <div className=\"col-md-6\">\n                            { (compareSource !== null) ? <UploadSuccessAlert /> : null }\n                            { (imgStep1LoadStatus === 'not loaded') ? \n                                <Dropzone onDrop={this.handleOnDropForstep1Image} accept='image/*' maxSize={imageMaxSize} multiple={false}>\n                                {({getRootProps, getInputProps, isDragActive}) => {\n                                    return (\n                                        <div {...getRootProps()} className={classNames('dropzone', {'dropzone--isActive': isDragActive})}>\n                                            <input {...getInputProps()} />\n                                            <DivStep title='Step 1' note={ isDragActive ? 'Drag and drop the source photo here...' : \"Use your own image.  Upload or drag and drop. Your image isn't stored.\"} /> \n                                        </div>\n                                    )\n                                }}\n                                </Dropzone> : \n                                <div align=\"center\">\n                                    { (imgStep1LoadStatus === 'loading')  ? <div className=\"loader\"></div> :\n                                    <canvas className=\"dropzone-image-preview\" ref={this.imgStep1CanvasRef}></canvas> \n                                    }\n                                </div>\n                            }\n                        </div> \n                        { (compareSource !== null) ? \n                        <div className=\"col\">\n                            { (imgStep2LoadStatus === 'not loaded') ? \n                                <Dropzone onDrop={this.handleOnDropForParentImage} accept='image/*' maxSize={imageMaxSize} multiple={false}>\n                                {({getRootProps, getInputProps, isDragActive}) => {\n                                    return (\n                                        <div {...getRootProps()} className={classNames('dropzone', {'dropzone--isActive': isDragActive})}>\n                                            <input {...getInputProps()} />\n                                            <DivStep title='Step 2' note={ isDragActive ? 'Drag and drop the second photo here...' : \"Use your own image.  Upload or drag and drop. Your image isn't stored.\"} /> \n                                        </div>\n                                    )\n                                }}\n                                </Dropzone> : \n                                <div align=\"center\">\n                                    { (imgStep2LoadStatus === 'loading')  ? <div className=\"loader\"></div> :\n                                    <canvas className=\"dropzone-image-preview\" ref={this.imgStep2CanvasRef}></canvas> \n                                    }\n                                </div>\n                                \n                            }\n                        </div> : null }\n\n                    </div>\n                    <div className=\"row\">\n\n                        <div className=\"col-md-6\">\n                            <div className=\"row\">\n                                { imgStep1FaceDetails.length > 1 ? <UploadDangerAlert onClick={this.clearToDefault} /> : null } \n                                { (imgStep1FaceDetails.length > 1 && imgStep1.length > 0) ? \n                                imgStep1FaceDetails.map(\n                                    (arr,i) => <MyCanvas faces={arr} origSrc={imgStep1[1]} onClick={ () => this.onThumbClick(arr) } key={i} />\n                                )\n                            : <div className=\"col\"></div> }\n                            </div>\n                        </div>\n            \n                    </div>\n                </div> }\n            </div>\n        );\n    }\n}\n\nexport default MyDropzone;"],"sourceRoot":""}